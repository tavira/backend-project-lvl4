- const getInputName = (entity, property) => `data[${property}]`
- const getInputId = (property) => `data_${property}`

mixin formFor(entity = null)
  form&attributes(attributes)
    block

mixin input(entity, viewName, propertyName, errors = [])
  - errors = Array(_.get(errors, propertyName, [])).flat()
  - classLine = 'form-control' + (_.isEmpty(errors) ? '' : ' is-invalid')
  .form-group(class=(errors[propertyName] && 'has-danger'))
    label= t(`${viewName}.${propertyName}`)
    input(
      id=getInputId(propertyName)
      name=getInputName(entity, propertyName)
      class=classLine
      value=_.get(entity, propertyName, '')
    )&attributes(attributes)
    if !_.isEmpty(errors)
      .invalid-feedback= errors.map(({ message }) => message).join('. ')

mixin submit(form = null)
  .form-group
    input(class='btn btn-primary' type='submit')&attributes(attributes)

mixin buttonTo(action, method, formAttributes = {})
  form(action=action, method="post")&attributes(formAttributes)
    input(name="_method" type="hidden" value=method)
    input(type='submit')&attributes(attributes)
